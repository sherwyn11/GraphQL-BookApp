{"version":3,"sources":["utils/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","components/AuthorDetails.js","components/AddAuthor.js","App.js","serviceWorker.js","index.js"],"names":["getAuthorsQuery","gql","getBooksQuery","addBookMutation","addAuthorMutation","getBookQuery","getAuthorQuery","BookDetails","book","this","props","data","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","loading","onClick","e","setState","displayBooks","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","AuthorDetails","age","displayAuthorDetails","AddAuthor","Number","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1564f028.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getAuthorsQuery = gql`\n    {\n        authors {\n            name\n            id\n        }\n    }\n`;\n\nconst getBooksQuery = gql`\n    {\n        books{\n            name,\n            id\n        }\n    }\n`;\n\nconst addBookMutation = gql`\n    mutation($name: String!, $genre: String!, $authorId: ID!) {\n        addBook(\n            name : $name, \n            genre: $genre,\n            authorId: $authorId\n        ){\n            name,\n            id\n        }\n    }\n`;\n\nconst addAuthorMutation = gql`\n    mutation($name: String!, $age: Int!) {\n        addAuthor(\n            name : $name, \n            age: $age,\n        ){\n            name,\n            age\n        }\n    }\n`;\n\nconst getBookQuery = gql`\n    query GetBook($id: ID){\n        book(id: $id) {\n            id\n            name\n            genre\n            author {\n                id\n                name\n                age\n                books {\n                    name\n                    id\n                }\n            }\n        }\n    }\n`;\n\nconst getAuthorQuery = gql`\n    query GetAuthor($id: ID){\n        author(id: $id) {\n            name\n            age\n            books {\n                name\n                genre\n            }\n        }\n    }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery, addAuthorMutation, getAuthorQuery };","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery } from '../utils/queries';\n\nclass BookDetails extends Component {\n    displayBookDetails(){\n        const { book } = this.props.data;\n        if(book){\n            return(\n                <div>\n                    <h2>{ book.name }</h2>\n                    <p>{ book.genre }</p>\n                    <p>{ book.author.name }</p>\n                    <p>All books by this author:</p>\n                    <ul className=\"other-books\">\n                        { book.author.books.map(item => {\n                            return <li key={item.id}>{ item.name }</li>\n                        })}\n                    </ul>\n                </div>\n            );\n        } else {\n            return( <div>No book selected...</div> );\n        }\n    }\n    render(){\n        return(\n            <div id=\"book-details\">\n                { this.displayBookDetails() }\n            </div>\n        );\n    }\n}\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBooksQuery } from '../utils/queries';\nimport BookDetails from './BookDetails';\n\n\nclass BookList extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            selected: null\n        }\n    }\n\n    displayBooks() {\n        var data = this.props.data;\n        if(!data.loading){\n            return data.books.map(book => {\n                return(\n                    <li key={ book.id } onClick={ (e) => this.setState({ selected: book.id }) }> { book.name } </li>\n                );\n            });\n        }else{\n             return(\n                <div>\n                    Loading Books...\n                </div>\n            );\n        }\n    }\n\n\n    render() {\n        return (\n            <ul id=\"book-list\">\n                { this.displayBooks() }\n                <br></br>\n                <BookDetails bookId={ this.state.selected }></BookDetails>\n            </ul>\n        )\n    }\n}\n\nexport default graphql(getBooksQuery)(BookList);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport {flowRight as compose} from 'lodash';   \nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from '../utils/queries';\n\n\nclass AddBook extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            genre: \"\",\n            authorId: \"\"\n        }\n    }\n    \n    displayAuthors(){\n        var data = this.props.getAuthorsQuery;\n        if(data.loading){\n            return( <option disabled>Loading authors...</option> );\n        } else {\n            return data.authors.map(author => {\n                return( <option key={ author.id } value={author.id}>{ author.name }</option> );\n            });\n        }\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n        this.props.addBookMutation({\n            variables: {\n                name: this.state.name,\n                genre: this.state.genre,\n                authorId: this.state.authorId\n            },\n            refetchQueries: [{\n                query: getBooksQuery\n            }]\n        });\n    }\n\n    render(){\n        return(\n            <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n                <div className=\"field\">\n                    <label>Book name:</label>\n                    <input type=\"text\" onChange={(e) => this.setState({ name: e.target.value })}/>\n                </div>\n                <br></br>\n                <div className=\"field\">\n                    <label>Genre:</label>\n                    <input type=\"text\" onChange={(e) => this.setState({ genre: e.target.value })}/>\n                </div>\n                <br></br>\n                <div className=\"field\">\n                    <label>Author:</label>\n                    <select onChange={(e) => this.setState({ authorId: e.target.value })}>\n                        <option>Select author</option>\n                        { this.displayAuthors() }\n                    </select>\n                </div>\n                <br></br>\n                <button>Add Book</button>\n\n            </form>\n        );\n    }\n}\n\nexport default compose(\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n    graphql(addBookMutation, { name: \"addBookMutation\" })\n)(AddBook);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getAuthorQuery } from '../utils/queries';\n\nclass AuthorDetails extends Component {\n    displayAuthorDetails(){\n        const { author } = this.props.data;\n        if(author){\n            return(\n                <div>\n                    <h2>{ author.name }</h2>\n                    <p>Age: { author.age }</p>\n                    <p>All books by this author:</p>\n                    <ul className=\"other-books\">\n                        { author.books.map(item => {\n                            return <li key={item.id}>{ item.name }</li>\n                        })}\n                    </ul>\n                </div>\n            );\n        } else {\n            return( <div><br></br>No author selected...</div> );\n        }\n    }\n    render(){\n        return(\n            <div id=\"author-details\">\n                { this.displayAuthorDetails() }\n            </div>\n        );\n    }\n}\n\nexport default graphql(getAuthorQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.authorId\n            }\n        }\n    }\n})(AuthorDetails);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport {flowRight as compose} from 'lodash';   \nimport { getAuthorsQuery, addBookMutation, getBooksQuery, addAuthorMutation } from '../utils/queries';\nimport AuthorDetails from './AuthorDetails';\n\n\nclass AddAuthor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            age: null,\n            selected: null,\n        }\n    }\n    \n    displayAuthors(){\n        var data = this.props.getAuthorsQuery;\n        if(data.loading){\n            return( <option disabled>Loading authors...</option> );\n        } else {\n            return data.authors.map(author => {\n                return( <li key={ author.id } value={author.id} onClick={ (e) => this.setState({ selected: author.id }) }>{ author.name }</li> );\n            });\n        }\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n        this.props.addAuthorMutation({\n            variables: {\n                name: this.state.name,\n                age: this.state.age,\n            },\n            refetchQueries: [{\n                query: getAuthorsQuery\n            }]\n        });\n    }\n\n    render(){\n        return(\n            <div>\n                { this.displayAuthors() }\n                <h3>Add Author</h3>\n                <br></br>\n                <form id=\"add-author\" onSubmit={this.submitForm.bind(this)}>\n                    <div className=\"field\">\n                        <label>Author name:</label>\n                        <input type=\"text\" onChange={(e) => this.setState({ name: e.target.value })}/>\n                    </div>\n                    <br></br>\n                    <div className=\"field\">\n                        <label>Age:</label>\n                        <input type=\"text\" onChange={(e) => this.setState({ age: Number(e.target.value) })}/>\n                    </div>\n                    <br></br>\n        \n                    <button>Add Author</button>\n\n                </form>\n\n                <AuthorDetails authorId={ this.state.selected }></AuthorDetails>\n\n\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n    graphql(addAuthorMutation, { name: \"addAuthorMutation\" })\n)(AddAuthor);","import React, { Component } from 'react';\nimport './App.css';\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport AddAuthor from './components/AddAuthor';\n\n\nconst client = new ApolloClient({\n  uri: 'https://book-graphql-server.herokuapp.com/graphql',\n});\n\nclass App extends Component {\n  render(){\n    return (\n        <ApolloProvider client={ client }>\n            <div id=\"name\">\n                <h1>Books 4 You</h1>\n                <i>Powered by GraphQL, Node.js, MongoDB-Atlas & ReactJS</i>\n                <h4>Books in the Database</h4>\n                <BookList></BookList>\n                <br></br>\n                <AddBook></AddBook>\n                <h4>Authors in the Database</h4>\n                <br></br>\n                <AddAuthor></AddAuthor>\n            </div>\n        </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}